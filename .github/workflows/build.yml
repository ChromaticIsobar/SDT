name: build

on:
  push:
    branches:
      - master
      - develop
    tags:
      - 'v*.*'
  pull_request:
    branches:
      - master
      - develop

jobs:
  build-docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux, win32, win64]
        platform: [install, install_core, install_max, install_pd]
        exclude:
        - target: linux
          platform: install_core
        - target: linux
          platform: install_max
        - target: linux
          platform: install_pd
        - target: win32
          platform: install
        - target: win64
          platform: install
        - target: win64
          platform: install_pd
        include:
        - target: linux
          dir: PREFIX
        - target: win32
          dir: DSTDIR
        - target: win64
          dir: DSTDIR
        - platform: install
          plt_name: _pd
        - platform: install_core
          plt_name: ""
        - platform: install_pd
          plt_name: _pd
        - platform: install_max
          plt_name: _max
    container: chromaticisobar/pd
    steps:
    - uses: actions/checkout@v2
    - name: Make
      run: cd build/${{ matrix.target }} && make
    - name: Prepare package directory
      run: mkdir SoundDesignToolkit
    - name: Package
      run: cd build/${{ matrix.target }} && make ${{ matrix.platform }} ${{ matrix.dir }}=../../SoundDesignToolkit
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: SDT_${{ matrix.target }}${{ matrix.plt_name }}
        path: SoundDesignToolkit

  # Cannot be run in the previous matrix because there is no way (for now) to specify not to use a container for macos
  # https://github.community/t/run-matrix-job-on-macos-and-on-ubuntu-in-container/16359/3
  # Job definiton is ready for merge in case the option is impelemented
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [macosx]
        platform: [install, install_core, install_max, install_pd]
        exclude:
        - target: macosx
          platform: install
        include:
        - target: macosx
          dir: DSTDIR
        - platform: install_core
          plt_name: ""
        - platform: install_pd
          plt_name: _pd
        - platform: install_max
          plt_name: _max
    # notice that steps are the same as build-docker
    steps:
    - uses: actions/checkout@v2
    - name: Make
      run: cd build/${{ matrix.target }} && make
    - name: Prepare package directory
      run: mkdir SoundDesignToolkit
    - name: Package
      run: cd build/${{ matrix.target }} && make ${{ matrix.platform }} ${{ matrix.dir }}=../../SoundDesignToolkit
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: SDT_${{ matrix.target }}${{ matrix.plt_name }}
        path: SoundDesignToolkit

  release:
    strategy:
      matrix:
        target: [linux, win32, win64, macosx]
        platform: ["", _pd, _max]
        exclude:
        - target: linux
          platform: ""
        - target: linux
          platform: _max
        - target: win64
          platform: _pd
    if: ${{ startsWith( github.ref , 'refs/tags/' ) }}
    runs-on: ubuntu-latest
    needs: [build-docker, build-macos]
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v1
      with:
        name: SDT_${{ matrix.target }}${{ matrix.platform }}
    - name: Zip artifacts
      run: zip -r ../SDT_${{ matrix.target }}${{ matrix.platform }}.zip *
      working-directory: SDT_${{ matrix.target }}${{ matrix.platform }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}_${{ matrix.target }}${{ matrix.platform }}
        release_name: SDT_${{ matrix.target }}${{ matrix.platform }} ${{ github.ref }}
        draft: false
        prerelease: ${{ contains( github.ref , 'dev' ) }}
    - name: LS
      run: ls
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./SDT_${{ matrix.target }}${{ matrix.platform }}.zip
        asset_name: SDT_${{ matrix.target }}${{ matrix.platform }}.zip
        asset_content_type: application/zip